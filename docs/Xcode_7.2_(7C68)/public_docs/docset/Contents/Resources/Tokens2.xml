<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/XCTestCase.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/XCTestCase</TokenIdentifier>
			<Abstract type="html">* @class XCTestCase
* XCTestCase is a concrete subclass of XCTest that should be the override point for
* most developers creating tests for their projects. A test case subclass can have
* multiple test methods and supports setup and tear down that executes for every test
* method as well as class level setup and tear down.
*
* To define a test case:
*
* • Create a subclass of XCTestCase.
* • Implement -test methods.
* • Optionally define instance variables or properties that store the state of the test.
* • Optionally initialize state by overriding setUp
* • Optionally clean-up after a test by overriding tearDown.
*
* Test methods are instance methods meeting these requirements:
* • accepting no parameters
* • returning no value
* • prefixed with &apos;test&apos;
*
* For example:</Abstract>
			<DeclaredIn>XCTestCase.h</DeclaredIn>
            
			
			<NodeRef refid="2"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/XCTestCase/testCaseWithInvocation:</TokenIdentifier>
			<Abstract type="html">@method +testCaseWithInvocation:</Abstract>
			<DeclaredIn>XCTestCase.h</DeclaredIn>
			
			<Declaration>+ (instancetype)testCaseWithInvocation:(nullable NSInvocation *)invocation</Declaration>
			
			
			<Anchor>//api/name/testCaseWithInvocation:</Anchor>
            <NodeRef refid="2"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/XCTestCase/initWithInvocation:</TokenIdentifier>
			<Abstract type="html">@method -initWithInvocation:</Abstract>
			<DeclaredIn>XCTestCase.h</DeclaredIn>
			
			<Declaration>- (instancetype)initWithInvocation:(nullable NSInvocation *)invocation</Declaration>
			
			
			<Anchor>//api/name/initWithInvocation:</Anchor>
            <NodeRef refid="2"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/XCTestCase/testCaseWithSelector:</TokenIdentifier>
			<Abstract type="html">@method +testCaseWithSelector:</Abstract>
			<DeclaredIn>XCTestCase.h</DeclaredIn>
			
			<Declaration>+ (instancetype)testCaseWithSelector:(SEL)selector</Declaration>
			
			
			<Anchor>//api/name/testCaseWithSelector:</Anchor>
            <NodeRef refid="2"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/XCTestCase/initWithSelector:</TokenIdentifier>
			<Abstract type="html">@method -initWithSelector:</Abstract>
			<DeclaredIn>XCTestCase.h</DeclaredIn>
			
			<Declaration>- (instancetype)initWithSelector:(SEL)selector</Declaration>
			
			
			<Anchor>//api/name/initWithSelector:</Anchor>
            <NodeRef refid="2"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/XCTestCase/setInvocation:</TokenIdentifier>
			<Abstract type="html">@property invocation
The invocation used when this test is run.</Abstract>
			<DeclaredIn>XCTestCase.h</DeclaredIn>
			
			<Declaration>@property (strong, nullable) NSInvocation *invocation</Declaration>
			
			
			<Anchor>//api/name/invocation</Anchor>
            <NodeRef refid="2"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/XCTestCase/invocation</TokenIdentifier>
			<Abstract type="html">@property invocation
The invocation used when this test is run.</Abstract>
			<DeclaredIn>XCTestCase.h</DeclaredIn>
			
			<Declaration>@property (strong, nullable) NSInvocation *invocation</Declaration>
			
			
			<Anchor>//api/name/invocation</Anchor>
            <NodeRef refid="2"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/XCTestCase/invocation</TokenIdentifier>
			<Abstract type="html">@property invocation
The invocation used when this test is run.</Abstract>
			<DeclaredIn>XCTestCase.h</DeclaredIn>
			
			<Declaration>@property (strong, nullable) NSInvocation *invocation</Declaration>
			
			
			<Anchor>//api/name/invocation</Anchor>
            <NodeRef refid="2"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/XCTestCase/invokeTest</TokenIdentifier>
			<Abstract type="html">@method -invokeTest
Invoking a test performs its setUp, invocation, and tearDown. In general this
should not be called directly.</Abstract>
			<DeclaredIn>XCTestCase.h</DeclaredIn>
			
			<Declaration>- (void)invokeTest</Declaration>
			
			
			<Anchor>//api/name/invokeTest</Anchor>
            <NodeRef refid="2"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/XCTestCase/setContinueAfterFailure:</TokenIdentifier>
			<Abstract type="html">@property continueAfterFailure
The test case behavior after a failure. Defaults to YES.</Abstract>
			<DeclaredIn>XCTestCase.h</DeclaredIn>
			
			<Declaration>@property BOOL continueAfterFailure</Declaration>
			
			
			<Anchor>//api/name/continueAfterFailure</Anchor>
            <NodeRef refid="2"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/XCTestCase/continueAfterFailure</TokenIdentifier>
			<Abstract type="html">@property continueAfterFailure
The test case behavior after a failure. Defaults to YES.</Abstract>
			<DeclaredIn>XCTestCase.h</DeclaredIn>
			
			<Declaration>@property BOOL continueAfterFailure</Declaration>
			
			
			<Anchor>//api/name/continueAfterFailure</Anchor>
            <NodeRef refid="2"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/XCTestCase/continueAfterFailure</TokenIdentifier>
			<Abstract type="html">@property continueAfterFailure
The test case behavior after a failure. Defaults to YES.</Abstract>
			<DeclaredIn>XCTestCase.h</DeclaredIn>
			
			<Declaration>@property BOOL continueAfterFailure</Declaration>
			
			
			<Anchor>//api/name/continueAfterFailure</Anchor>
            <NodeRef refid="2"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/XCTestCase/recordFailureWithDescription:inFile:atLine:expected:</TokenIdentifier>
			<Abstract type="html">@method -recordFailureWithDescription:inFile:atLine:expected:
Records a failure in the execution of the test and is used by all test assertions.</Abstract>
			<DeclaredIn>XCTestCase.h</DeclaredIn>
			
			<Declaration>- (void)recordFailureWithDescription:(NSString *)description inFile:(NSString *)filePath atLine:(NSUInteger)lineNumber expected:(BOOL)expected</Declaration>
			<Parameters>
				<Parameter>
					<Name>description</Name>
					<Abstract type="html">The description of the failure being reported.</Abstract>
				</Parameter><Parameter>
					<Name>filePath</Name>
					<Abstract type="html">The file path to the source file where the failure being reported
was encountered.</Abstract>
				</Parameter><Parameter>
					<Name>lineNumber</Name>
					<Abstract type="html">The line number in the source file at filePath where the
failure being reported was encountered.</Abstract>
				</Parameter><Parameter>
					<Name>expected</Name>
					<Abstract type="html">YES if the failure being reported was the result of a failed assertion,
NO if it was the result of an uncaught exception.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/recordFailureWithDescription:inFile:atLine:expected:</Anchor>
            <NodeRef refid="2"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/XCTestCase/testInvocations</TokenIdentifier>
			<Abstract type="html">@method +testInvocations
Invocations for each test method in the test case.</Abstract>
			<DeclaredIn>XCTestCase.h</DeclaredIn>
			
			<Declaration>+ (NSArray&lt;NSInvocation*&gt; *)testInvocations</Declaration>
			
			
			<Anchor>//api/name/testInvocations</Anchor>
            <NodeRef refid="2"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/XCTestCase/defaultPerformanceMetrics</TokenIdentifier>
			<Abstract type="html">@method +defaultPerformanceMetrics
The names of the performance metrics to measure when invoking measureBlock:. Returns XCTPerformanceMetric_WallClockTime by default. Subclasses can override this to change the behavior of measureBlock:</Abstract>
			<DeclaredIn>XCTestCase.h</DeclaredIn>
			
			<Declaration>+ (NSArray&lt;NSString*&gt; *)defaultPerformanceMetrics</Declaration>
			
			
			<Anchor>//api/name/defaultPerformanceMetrics</Anchor>
            <NodeRef refid="2"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/XCTestCase/measureBlock:</TokenIdentifier>
			<Abstract type="html">* @method -measureBlock:
*
* Call from a test method to measure resources (defaultPerformanceMetrics used by the
* block in the current process.</Abstract>
			<DeclaredIn>XCTestCase.h</DeclaredIn>
			
			<Declaration>- (void)measureBlock:(void ( ^ ) ( void ))block</Declaration>
			
			
			<Anchor>//api/name/measureBlock:</Anchor>
            <NodeRef refid="2"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/XCTestCase/measureMetrics:automaticallyStartMeasuring:forBlock:</TokenIdentifier>
			<Abstract type="html">* @method -measureMetrics:automaticallyStartMeasuring:forBlock:
*
* Call from a test method to measure resources (XCTPerformanceMetrics) used by the
* block in the current process. Each metric will be measured across calls to the block.
* The number of times the block will be called is undefined and may change in the
* future. For one example of why, as long as the requested performance metrics do
* not interfere with each other the API will measure all metrics across the same
* calls to the block. If the performance metrics may interfere the API will measure
* them separately.</Abstract>
			<DeclaredIn>XCTestCase.h</DeclaredIn>
			
			<Declaration>- (void)measureMetrics:(NSArray&lt;NSString*&gt; *)metrics automaticallyStartMeasuring:(BOOL)automaticallyStartMeasuring forBlock:(void ( ^ ) ( void ))block</Declaration>
			
			
			<Anchor>//api/name/measureMetrics:automaticallyStartMeasuring:forBlock:</Anchor>
            <NodeRef refid="2"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/XCTestCase/startMeasuring</TokenIdentifier>
			<Abstract type="html">@method -startMeasuring
Call this from within a measure block to set the beginning of the critical section.
Measurement of metrics will start at this point.</Abstract>
			<DeclaredIn>XCTestCase.h</DeclaredIn>
			
			<Declaration>- (void)startMeasuring</Declaration>
			
			
			<Anchor>//api/name/startMeasuring</Anchor>
            <NodeRef refid="2"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/XCTestCase/stopMeasuring</TokenIdentifier>
			<Abstract type="html">@method -stopMeasuring
Call this from within a measure block to set the ending of the critical section.
Measurement of metrics will stop at this point.</Abstract>
			<DeclaredIn>XCTestCase.h</DeclaredIn>
			
			<Declaration>- (void)stopMeasuring</Declaration>
			
			
			<Anchor>//api/name/stopMeasuring</Anchor>
            <NodeRef refid="2"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/XCTestCase/addUIInterruptionMonitorWithDescription:handler:</TokenIdentifier>
			<Abstract type="html">Adds a handler to the current context. Returns a token that can be used to unregister the handler. Handlers are invoked in the reverse order in which they are added until one of the handlers returns true, indicating that it has handled the alert.</Abstract>
			<DeclaredIn>XCTestCase.h</DeclaredIn>
			
			<Declaration>- (id&lt;NSObject&gt;)addUIInterruptionMonitorWithDescription:(NSString *)handlerDescription handler:(BOOL ( ^ ) ( XCUIElement *interruptingElement ))handler</Declaration>
			<Parameters>
				<Parameter>
					<Name>handlerDescription</Name>
					<Abstract type="html">Explanation of the behavior and purpose of this handler, mainly used for debugging and analysis.</Abstract>
				</Parameter><Parameter>
					<Name>handler</Name>
					<Abstract type="html">Handler block for asynchronous UI such as alerts and other dialogs. Handlers should return true if they handled the UI, false if they did not. The handler is passed an XCUIElement representing the top level UI element for the alert.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/addUIInterruptionMonitorWithDescription:handler:</Anchor>
            <NodeRef refid="2"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/XCTestCase/removeUIInterruptionMonitor:</TokenIdentifier>
			<Abstract type="html">Removes a handler using the token provided when it was added.</Abstract>
			<DeclaredIn>XCTestCase.h</DeclaredIn>
			
			<Declaration>- (void)removeUIInterruptionMonitor:(id&lt;NSObject&gt;)monitor</Declaration>
			
			
			<Anchor>//api/name/removeUIInterruptionMonitor:</Anchor>
            <NodeRef refid="2"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/XCTestCase/expectationWithDescription:</TokenIdentifier>
			<Abstract type="html">@method +expectationWithDescription:</Abstract>
			<DeclaredIn>XCTestCase+AsynchronousTesting.h</DeclaredIn>
			
			<Declaration>- (XCTestExpectation *)expectationWithDescription:(NSString *)description</Declaration>
			
			
			<Anchor>//api/name/expectationWithDescription:</Anchor>
            <NodeRef refid="2"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/XCTestCase/waitForExpectationsWithTimeout:handler:</TokenIdentifier>
			<Abstract type="html">@method -waitForExpectationsWithTimeout:handler:</Abstract>
			<DeclaredIn>XCTestCase+AsynchronousTesting.h</DeclaredIn>
			
			<Declaration>- (void)waitForExpectationsWithTimeout:(NSTimeInterval)timeout handler:(nullable XCWaitCompletionHandler)handler</Declaration>
			
			
			<Anchor>//api/name/waitForExpectationsWithTimeout:handler:</Anchor>
            <NodeRef refid="2"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/XCTestCase/keyValueObservingExpectationForObject:keyPath:expectedValue:</TokenIdentifier>
			<Abstract type="html">@method keyValueObservingExpectationForObject:keyPath:expectedValue:</Abstract>
			<DeclaredIn>XCTestCase+AsynchronousTesting.h</DeclaredIn>
			
			<Declaration>- (XCTestExpectation *)keyValueObservingExpectationForObject:(id)objectToObserve keyPath:(NSString *)keyPath expectedValue:(nullable id)expectedValue</Declaration>
			
			
			<Anchor>//api/name/keyValueObservingExpectationForObject:keyPath:expectedValue:</Anchor>
            <NodeRef refid="2"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/XCTestCase/keyValueObservingExpectationForObject:keyPath:handler:</TokenIdentifier>
			<Abstract type="html">@method keyValueObservingExpectationForObject:keyPath:handler:</Abstract>
			<DeclaredIn>XCTestCase+AsynchronousTesting.h</DeclaredIn>
			
			<Declaration>- (XCTestExpectation *)keyValueObservingExpectationForObject:(id)objectToObserve keyPath:(NSString *)keyPath handler:(nullable XCKeyValueObservingExpectationHandler)handler</Declaration>
			
			
			<Anchor>//api/name/keyValueObservingExpectationForObject:keyPath:handler:</Anchor>
            <NodeRef refid="2"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/XCTestCase/expectationForNotification:object:handler:</TokenIdentifier>
			<Abstract type="html">@method expectationForNotification:object:handler:</Abstract>
			<DeclaredIn>XCTestCase+AsynchronousTesting.h</DeclaredIn>
			
			<Declaration>- (XCTestExpectation *)expectationForNotification:(NSString *)notificationName object:(nullable id)objectToObserve handler:(nullable XCNotificationExpectationHandler)handler</Declaration>
			
			
			<Anchor>//api/name/expectationForNotification:object:handler:</Anchor>
            <NodeRef refid="2"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/XCTestCase/expectationForPredicate:evaluatedWithObject:handler:</TokenIdentifier>
			<Abstract type="html">@method expectationForPredicate:evaluatedWithObject:handler:
Creates an expectation that is fulfilled if the predicate returns true when evaluated with the given
object. The expectation periodically evaluates the predicate and also may use notifications or other
events to optimistically re-evaluate.</Abstract>
			<DeclaredIn>XCTestCase+AsynchronousTesting.h</DeclaredIn>
			
			<Declaration>- (XCTestExpectation *)expectationForPredicate:(NSPredicate *)predicate evaluatedWithObject:(id)object handler:(nullable XCPredicateExpectationHandler)handler</Declaration>
			
			
			<Anchor>//api/name/expectationForPredicate:evaluatedWithObject:handler:</Anchor>
            <NodeRef refid="2"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/XCTestCase/defaultTestSuite</TokenIdentifier>
			<Abstract type="html">@method +defaultTestSuite
Returns a test suite containing test cases for all of the tests in the class.</Abstract>
			<DeclaredIn>XCTestCase.h</DeclaredIn>
			
			<Declaration>+ (XCTestSuite *)defaultTestSuite</Declaration>
			
			
			<Anchor>//api/name/defaultTestSuite</Anchor>
            <NodeRef refid="2"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/XCTestCase/setUp</TokenIdentifier>
			<Abstract type="html">@method +setUp
Setup method called before the invocation of any test method in the class.</Abstract>
			<DeclaredIn>XCTestCase.h</DeclaredIn>
			
			<Declaration>+ (void)setUp</Declaration>
			
			
			<Anchor>//api/name/setUp</Anchor>
            <NodeRef refid="2"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/XCTestCase/tearDown</TokenIdentifier>
			<Abstract type="html">@method +testDown
Teardown method called after the invocation of every test method in the class.</Abstract>
			<DeclaredIn>XCTestCase.h</DeclaredIn>
			
			<Declaration>+ (void)tearDown</Declaration>
			
			
			<Anchor>//api/name/tearDown</Anchor>
            <NodeRef refid="2"/>
		</Token>
		
        
        
	</File>
</Tokens>